#labels Featured
#just a couple of things/thoughts to tell/share about the DS port status.

= DS port status =

First, it's been a pair of months since i joined to the DS port [http://code.google.com/p/inferno-ds inferno-ds],
the goal wasn't quite clear when i started, so it was mainly to figure what bits {{{[1]}}} were right/wrong {{{[2]}}}
and try to "polish the sharp edges", in concrete terms this has meant:
	
	- get ints right on the arm7 side:
	which controls most of the non-video related devices: (rtc, wifi, audio, touch screen, fifo, ...)
	
	- get ints right on the arm9 side, also:
	which gives clockintr so progs are scheduled correctly, and the arm9 can catch 
	undefined instructions related to fpi to emulate them.
	
	- modifying mkfiles a bit so one can develop DS code under the most common platforms:
	Linux, Nt and MacOSX (which was the platform Npe originally started coding).

At the moment of writting this i've made some small changes
(based on the the latest code in the inferno-ds repo)
that allow me to launch  the window manager ("wm/wm") and interact with it 
by means of the touch screen and buttons, launching some programs from the menu, 
and entering some text in the wm/sh to run commands.

= TODO =

And now the next steps as i see them (most important things first):

for me the most important thing atm is getting something to ease development/use
this means: "reduce the code/build/burn/test time", things that can help here are:

	- use of DS emus, i've used desmume, dsemu & no$gba (which Npe has encouraged me to use),
	NOTE that emus don't replace the hardware, but they make the first steps of adding new code
	and testing a bit faster, so keep in mind that the purpose is "to go for the real thing" (hardware),
	so of course wifi networking would be a big help.
	
	- related to the wifi, another thing that helps is wifime,
	so one doesn't have to copy the programs to the storage card and power up the ds
	and launch the nds images, just put the images in a directory and use wifime to made
	them reachable through wifi.

	- while lacking of an runtime debugger, a thing that could help
	and i think it shouldn't be hard is to get the debugkeys mechanism working,
	and of course the use of debugging print()s.

	- polishing more sharp edges as they appear. right now i can name a few:
	memory protection, handling of fpi undefined exceptions, cache management ...
	
	- program arm9 devices; like sd/cf storage: devdldi.c,
	improve video/lcd/screens using the hw capabilities of the DS.
	
	- program other arm7 devices (rtc, audio, fifos, ...)
	
	- comunicate both sides (arm7 & arm9) this is working at the moment with IPC:
	but probably for dswifi (say ethernifi.c) a mechanism for fifo based communication
	would be needed, so probably this could pop up to be on the top of the TODO list.

(...)

{{{[1]}}}
	so before asking

	Q1: what was wrong/right?, 
	there was a previous question 

	Q0: what comes with a DS?, and how it works?

	A0: as i've been figuring the answer, i've updated the links in the inferno-ds  [http://code.google.com/p/inferno-ds/w/list wiki] 
	in the hope that the ones coming after, could follow the tracks easily, so the wiki should help to answer those questions.

	A1: this should be answered by this text.
	For any other question the [http://groups.google.com/group/inferno-ds/ inferno-ds list], can be a good place to ask.

{{{[2]}}}
	thankfully Noah had a lot of things working,
	the most important/used it's been the lcd to debug with print statements.

REFS 
  * http://code.google.com/p/inferno-os  *inferno-os project*

  * http://code.google.com/p/inferno-ds  *inferno-ds project*
  * http://code.google.com/p/inferno-ds/w/list  *inferno-ds wiki*
  * http://groups.google.com/group/inferno-ds/  *inferno-ds group list*

--
salva